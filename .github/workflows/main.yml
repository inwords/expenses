name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'web/**'
      - 'infra/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'web/**'
      - 'infra/**'
      - '.github/workflows/**'

jobs:
  containers_matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix-json.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Filter changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend: 'backend/**'
            frontend: 'web/**'
            otel-collector: 'infra/otel-collector/**'

      - name: Prepare matrix JSON
        id: matrix-json
        run: |
          # 'filter.outputs.changes' contains a JSON array of changed service names, e.g. ["backend","frontend"].
          changed_services='${{ steps.filter.outputs.changes }}'

          # Define all available services in a JSON file
          cat <<EOF > services.json
          [
            {
              "name": "backend",
              "context": "./backend",
              "tags": "ruggedbl/commonex-nest-backend:latest"
            },
            {
              "name": "frontend",
              "context": "./web",
              "tags": "ruggedbl/commonex-next-web:latest"
            },
            {
              "name": "otel-collector",
              "context": "./infra/otel-collector",
              "tags": "ruggedbl/opentelemetry-collector-custom:latest"
            }
          ]
          EOF

          matrix=$(jq -c --argjson changed_services "$changed_services" '
          [
          .[] | (.name) as $n | select($changed_services | index($n) != null)
          ]
          ' services.json)
          
          echo "matrix={\"service\":$matrix}" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    needs: containers_matrix_prep
    strategy:
      matrix: ${{ fromJson(needs.containers_matrix_prep.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push ${{ matrix.service.name }} image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service.context }}
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ matrix.service.tags }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Host *" >> ~/.ssh/config
          echo "    StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Deploy with Docker Compose
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SERVER_IP }} << EOF
            cd ${{ secrets.APP_PATH }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} \
            POSTGRES_USER_NAME=${{ secrets.POSTGRES_USER_NAME }} \
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }} \
            OPEN_EXCHANGE_RATES_API_ID=${{ secrets.OPEN_EXCHANGE_RATES_API_ID }} \
            GF_SECURITY_ADMIN_USER=${{ secrets.GF_SECURITY_ADMIN_USER }} \
            GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }} \
            docker compose -f docker-compose-prod.yml up -d --pull always
          EOF

